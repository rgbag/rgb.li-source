// Generated by CoffeeScript 2.4.1
(function() {
  // # Register Service Worker
  // window.onload = ->
  //     'use strict'
  //     if 'serviceWorker' of navigator
  //         navigator.serviceWorker.register('./sw.js').then((registration) ->
  //             console.log 'Service Worker Registered', registration
  //             return
  //         ).catch (err) ->
  //             console.log 'Service Worker Failed to Register', err
  //             return
  //     return

  //###########################################################
  var adjustDisplayState, createColorGrid, debugLog, disablefullScreenColor, enablefullScreenColor, getUrlQuery, home, isFullScreen, onElementClick, onPageLoad, setup, urlSeperator, validateColorCode, windowHistoryPushState;

  urlSeperator = '#';

  //###########################################################
  debugLog = true;

  debugLog = function(log) {
    if (debugLog) {
      return console.log(log);
    }
  };

  //###########################################################
  onPageLoad = function() {
    debugLog("onPageLoad()");
    setup();
    return getUrlQuery(urlSeperator);
  };

  //###########################################################
  //region setup
  setup = function() {
    debugLog("setup()");
    createColorGrid();
    //# What is this supposed to do?
    return window.addEventListener('popstate', function(e) {
      debugLog('setup() -> popstate event');
      return adjustDisplayState();
    });
  };

  //###########################################################
  //region createColorGrid
  createColorGrid = function() {
    var colorSquares, colors, divArray, i, randomColor, results;
    debugLog('createColorGrid()');
    colorSquares = 1000;
    divArray = new Array;
    colors = document.getElementById('colors');
    i = 0;
    results = [];
    while (i < colorSquares) {
      divArray[i] = document.createElement('div');
      divArray[i].id = 'block' + i;
      divArray[i].style.backgroundColor = randomColor = '#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6);
      divArray[i].className = 'block' + i;
      divArray[i].className = 'color';
      divArray[i].setAttribute('href', "" + randomColor);
      divArray[i].addEventListener("click", onElementClick); // fixed by Lenny
      colors.appendChild(divArray[i]);
      results.push(i++);
    }
    return results;
  };

  adjustDisplayState = function() {
    var fullScreenColor;
    debugLog('adjustDisplayState()');
    if (isFullScreen()) {
      debugLog('adjustDisplayState() -> if isFullScreen(): ' + isFullScreen());
      return home();
    } else {
      fullScreenColor = document.getElementById('fullScreenColor');
      return fullScreenColor.style.height = '100vh';
    }
  };

  //###########################################################
  isFullScreen = function() {
    var fullScreenColor, fullScreenState;
    debugLog('isFullScreen()');
    fullScreenColor = document.getElementById('fullScreenColor');
    fullScreenState = 'unknown';
    if (fullScreenColor.style.height = '0px') { //bug? this is always true^^..
      debugLog('isFullScreen() -> fullScreenColor.style.height = "0px"');
      fullScreenState = true;
    } else {
      debugLog('isFullScreen() -> fullScreenColor.style.height = ' + fullScreenColor.style.height);
      fullScreenState = false;
    }
    return fullScreenState;
  };

  //###########################################################
  home = function() {
    debugLog('home()');
    return disablefullScreenColor('/.');
  };

  //###########################################################
  windowHistoryPushState = function(state3) {
    debugLog('windowHistoryPushState("' + state3 + '")');
    window.history.pushState(state3, state3, state3);
    debugLog('windowHistoryPushState("' + state3 + '") -> window.history.pushState("' + state3 + '", "' + state3 + '", "' + state3 + '")');
    return debugLog('windowHistoryPushState("' + state3 + '") -> window.history.state == ' + window.history.state);
  };

  //###########################################################
  enablefullScreenColor = function(color) {
    var fullScreenColor;
    debugLog("enablefullScreenColor(" + color + ")");
    fullScreenColor = document.getElementById('fullScreenColor');
    fullScreenColor.style.backgroundColor = color;
    fullScreenColor.style.height = '100vh';
    return windowHistoryPushState(color);
  };

  //###########################################################
  disablefullScreenColor = function(pushState) {
    var fullScreenColor;
    fullScreenColor = document.getElementById('fullScreenColor');
    fullScreenColor.style.backgroundColor = null;
    return fullScreenColor.style.height = '0px';
  };

  // windowHistoryPushState(pushState)

  //endregion

  //endregion
  onElementClick = function(event) {
    var color, tokens;
    debugLog('onElementClick(' + event + ')');
    tokens = event.target.getAttribute("href").split("#");
    color = "#" + tokens[1];
    return enablefullScreenColor(color);
  };

  getUrlQuery = function(urlSeperator) {
    var query, url;
    debugLog('getUrlQuery("' + urlSeperator + '")');
    urlSeperator = urlSeperator || "?";
    url = window.location.href;
    if (url.includes(urlSeperator)) {
      debugLog('getUrlQuery -> if url.includes(' + urlSeperator + ')');
      query = '#' + url.split(urlSeperator)[1];
      return validateColorCode(query);
    }
  };

  validateColorCode = function(colorCode) {
    debugLog('validateColorCode(' + colorCode + ')');
    if (/^#[0-9A-F]{6}$/i.test(colorCode) || /^#([0-9A-F]{3}){1,2}$/i.test(colorCode)) {
      debugLog('validateColorCode(' + colorCode + ') -> ' + colorCode + ' is a valid HEX color code');
      return enablefullScreenColor(colorCode);
    }
  };

  onPageLoad();

  // FUNCTIONS

// Config

// Generate Color Grid
// Animate

// Set URL onClick

// Get Color from URL

// Open Color Screen with Menu

// Open Fullscreen Color

// Menu
// Change Color

// Save Color to Favorites

// State Management
// window.history
// state variable

// Die ersten Farben manuell festlegen!

// Backwards compatible, future proof :)

}).call(this);
